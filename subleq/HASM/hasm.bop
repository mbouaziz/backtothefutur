// =======================================================//
// Projet Systèmes Numériques - ENS, semestre 2           //
// Mathieu Barbin, Mehdi Bouaziz.                         //
// HASM : Harware Architecture for a SubLeq Machine       //
// NETLIST : version en langage Bebop (bop)               //
// =======================================================//

// Reglage de la frequence du simulateur (simu)
#setCPS 1024

//architecture a n bits (à determiner)
#define AR 4

// Type de la RAM contenant le Program Reader
RAM PC (0, AR)

// Type de la RAM memoire de la machine SubLeq
// Avec initialisation a partir d'un fichier code binaire pour machine SubLeq
// a executer en mode RUN. (architecture 
RAM MEM (AR, AR) = file ("subleq.bin")

//========================================================//
//		STANDARD TEMPLATE LIBRARY		  //
//========================================================//

// Branchement Identitaire fil à fil 
ID[N] ( a : [N] ) = (b : [N])
where
	for idi = 0 to N - 1
		b[idi] = id(a[idi]);
	end for;
end where;

// Multiplexer avec des mots de N bits à enable à 1 bit
MUX[N] ( c, d1 : [N] , d2 : [N] ) = ( s : [N] )
where
	for k = 0 to N - 1
		s[k] = mux(c,d1[k],d2[k]);
	end for;
end where;

GND[D]()=( g : [D])
where
	for i = 0 to D - 1
		g[i] = gnd();
	end for;
end where;

VDD[N]()=(v : [N])
where
	for i = 0 to N - 1
		v[i] = vdd();
	end for;
end where;

// Tous les bits d'un mot de N bits sont-ils à 1 ?
AND[N]( a : [N] ) = s
where
	b[0] = id(a[0]);
	for i = 1 to N - 1
		b[i] = and( b[i - 1], a[i]);
	end for;
	s = id(b[N - 1]);
end where;

// Et bit à bit entre 2 mots de N bits
BAND[N](r0 : [N], r1 : [N]) = (nr1 : [N])
where
	for i = 0 to N - 1
		nr1[i] = and(r0[i],r1[i]);
	end for;
end where;

// NOT bit à bit sur un mot de N bits
NOT[N](a : [N]) = (s : [N])
where
	for i = 0 to N - 1
		s[i] = not(a[i]);
	end for;
end where;

// Test d'egalite bit à bit sur 2 mots de N bits
EQUALS[N]( a : [N], b : [N] ) = s
where
	q[-1] = vdd();
	for i = 0 to N - 1
		q[i] = and( q[i-1], or(and(a[i],b[i]),and(not(a[i]), not(b[i]))));
	end for;
	s = id(q[N-1]);
end where;

// Arbre brut de decision binaire
// N: nombre de feuilles. D: nombre de bits de donnes. donc logN bits de decisions
BDD[N][D]( input : [N] : [D], deci : [log(N)] ) = s : [D]
where
	for i = 0 to N - 1
		br[0][i] : [D]= ID[D](input[i] : [D]);
	end for;
	for i = 1 to log(N)
		for j = 0 to N / (2 ^ i) - 1
			br[i][j] : [D] = MUX[D]( deci[i - 1], br[i - 1][2*j + 1] : [D], br[i - 1][2*j] : [D]);
		end for;
	end for;
	s : [D] = ID[D](br[log(N)][0] : [D]);
end where;

// Prise Multiple de 1 bit vers N
VECTORIZE[N](a) =(b : [N])
where
	for i = 0 to N - 1
		b[i] = id(a);
	end for;
end where;

// Composante de base d'un additionneur binaire
FULL_ADDER( a, b, c) = (s, r)
where
	s = xor(xor(a,b),c);
	r = or(or( and(a,b), and(a,c)),and(b,c));
end where;

// Registre N bits
REG[N]( a : [N] ) = (s : [N])
where
	for i = 0 to N -1
		s[i] = reg(a[i]);
	end for;
end where;

// Regen N bits
REGEN[N]( a : [N], en) = (s : [N])
where
	for j = 0 to N -1
		s[j] = regen(a[j], en);
	end for;
end where;

// Compteur elementaire de 1 bit
CM2 (in) = (s,r)
where
	s = xor(in,ro); 
	ro = reg(s);
	r = and(in,ro);
end where;

// Compteur modulo N=2^D
CM[D](in)=(out : [D])
with unused = r[D-1]
where
	r[-1] = id(in);
	for i = 0 to D - 1
		out[i],r[i] = CM2(r[i - 1]);
	end for;
end where;

//Diviseur d'horloge modulo 2^D
DIVTIME[D](in)=(out)
where
	out = AND[D](NOT[D](CM[D](in)));
end where;

// FIXME : what is it ocan ??

//La difference avec FULL_ADDER: s est la sortie du registre
//et non pas celle du xor. 
//Inconvenient: un cycle de retard des resultats
//L'interet: pas de cycle dans le circuit
//Conclusion: le prof avait raison
//quand rst vaut 1 on affecte la valeur val dans le reg sinon ++ 
ADDER (i,rst, val ) = s,r
where
  s = Z(mux(rst,val,xor(s,i)));
  r = and(s,i);
end where;

// FIXME : is it really usefull ?

//C'est un compteur mod 5 special, avec deux 
//ctl is
//	00 -> regular
//  10 -> mettre a 0 (10_{2} vaut 1_{10})
//  11 -> mettre a 3
//Si ctl est regulier et que rst=1 on prend ctl'=01
//Si ctl=11 et que rst=1, par convention, on garde la valeur de ctl
//Sinon c'est rst qui passe (donc ctl'=01)
CM5 (in, ctl[0], ctl[1]) = (out : [3])
with unused = (c[3])
where
	is_zero = and(in,and(not(out[0]),and(not(out[1]),out[2])));
	//calcul du ctl effectif (i.e. combine avec rst)
	ctl'[0] = or(ctl[0], is_zero); 
	ctl'[1] = and(ctl[0], ctl[1]);

	ctl'11 = and(ctl'[0], ctl'[1]);
	resetto0 = and(ctl'[0], not(ctl'[1]));//si ctl'=10

	//les valeurs reset pour chaque case:
	reset[0] = or(resetto0, ctl'11);
	val[0] = id(ctl'11);	//si c'est alltozero ctl'11=0, si c'est ctl'11 alors =1

	reset[1] = id(reset[0]);	//symetrique
	val[1] = id(ctl'11);

	reset[2] = id(reset[0]);
	val[2] = gnd();				//que ce soit ctl'11 ou alltozero, on le met a 0

	c[0] = id(in);
	for i = 1 to 3 
		out[3 - i], c[4 - i] = ADDER(c[3 - i], reset[3 - i], val[3 - i]);
	end for;
end where;

// FIXME : is it usefull ??

// Tests suivants : mots ecrits des poids faibles vers les forts

// Test d'egalite à Zero
ISZERO( dat : [3] ) = b
where
	b = AND[3](NOT[3](dat : [3]));
end where;

// Reverse bit ordering
REVERSE[N]( dat : [N] ) = rdat : [N]
where
	for i = 0 to N -1
		rdat[i] = id(dat[N - i -1]);
	end for;
end where;

//========================================================//

//========================================================//
//	  ALU : SubLeq contient uniquement SUB   	  //
//========================================================//

// Addition Binaire sur AR bits, avec retenue d'entree et retenue de sortie
ADD(r0 : [AR], r1 : [AR], carry_in) = (nr1 : [AR], carry_out)
where
        c[0] = id(carry_in);
	for i = 0 to AR - 1
		nr1[i],c[i+1] = FULL_ADDER(r0[i],r1[i],c[i]);
	end for;
	//flag de debordement
	carry_out = id(c[AR]);
end where;

// Soustraction : a - b = a + 1 + 2^AR - 1 -b = a + 1 + not(b)
SUB(a : [AR], b : [AR]) = ( r : [AR] )
where
	r:[AR] = ADD(a:[AR], NOT[AR](b:[AR]), 1);
end where;

//========================================================//

// Premier Test du SUB de l'ALU
test_SUB( a:[AR], b:[AR] ) = s:[AR]
where
	s:[AR] = SUB(a:[AR], b:[AR]);
end where;

