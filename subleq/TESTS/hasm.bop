// =======================================================//
// Projet Systèmes Numériques - ENS, semestre 2           //
// Mathieu Barbin, Mehdi Bouaziz.                         //
// HASM : Harware Architecture for a SubLeq Machine       //
// NETLIST : version en langage Bebop (bop)               //
// VERSION : Sat Mar 15 01:05:34 CET 2008                 //
// DEBUG TERMINE jeudi 27 mars, 19:54:53                  //
// =======================================================//

// Reglage de la frequence du simulateur (simu)
// #setCPS 1024

//architecture a n bits (à determiner)
#define AR 4

// le nombre de bits necessaire a la representation de l'indice de cycle
// ici, on ne depasse jamais 5 cycles, donc CL = 3
#define CL 3

// Type de la RAM contenant le Program Reader
RAM PC (0, AR)

// Instruction : SubLeq ( a, b, c)
// RAMs contenant les valeurs de &a, &b
// nom Prefixé par P comme "Pointeur"
// RAM PRA (0, AR)
RAM PRB (0, AR)

// RAMs contenant les valeurs de *a, *b
// Vx comme "Valeur de x" ( pointee par PRx )
RAM VRA (0, AR)
// RAM VRB (0, AR)

// Type de la RAM memoire de la machine SubLeq
// Avec initialisation a partir d'un fichier code asci pour machine SubLeq
// a executer en mode RUN. (architecture 
RAM MEM (AR, AR) // = file ("subleq.asci")

//========================================================//
//		STANDARD TEMPLATE LIBRARY		  //
//========================================================//

// Branchement Identitaire fil à fil 
ID[N] ( a : [N] ) = (b : [N])
where
	for idi = 0 to N - 1
		b[idi] = id(a[idi]);
	end for;
end where;

// Multiplexer avec des mots de N bits à enable à 1 bit
MUX[N] ( c, d1 : [N] , d2 : [N] ) = ( s : [N] )
where
	for k = 0 to N - 1
		s[k] = mux(c,d1[k],d2[k]);
	end for;
end where;

GND[D]()=( g : [D])
where
	for i = 0 to D - 1
		g[i] = gnd();
	end for;
end where;

VDD[N]()=(v : [N])
where
	for i = 0 to N - 1
		v[i] = vdd();
	end for;
end where;

// Tous les bits d'un mot de N bits sont-ils à 1 ?
AND[N]( a : [N] ) = s
where
	b[0] = id(a[0]);
	for i = 1 to N - 1
		b[i] = and( b[i - 1], a[i]);
	end for;
	s = id(b[N - 1]);
end where;

// NOT bit à bit sur un mot de N bits
NOT[N](a : [N]) = (s : [N])
where
	for i = 0 to N - 1
		s[i] = not(a[i]);
	end for;
end where;

// Test d'egalite bit à bit sur 2 mots de N bits
EQUALS[N]( a : [N], b : [N] ) = s
where
	q[-1] = vdd();
	for i = 0 to N - 1
		q[i] = and( q[i-1], or(and(a[i],b[i]),and(not(a[i]), not(b[i]))));
	end for;
	s = id(q[N-1]);
end where;

// Arbre brut de decision binaire
// N: nombre de feuilles. D: nombre de bits de donnes. donc logN bits de decisions
BDD[N][D]( input : [N] : [D], deci : [log(N)] ) = s : [D]
where
	for i = 0 to N - 1
		br[0][i] : [D]= ID[D](input[i] : [D]);
	end for;
	for i = 1 to log(N)
		for j = 0 to N / (2 ^ i) - 1
			br[i][j] : [D] = MUX[D]( deci[i - 1], br[i - 1][2*j + 1] : [D], br[i - 1][2*j] : [D]);
		end for;
	end for;
	s : [D] = ID[D](br[log(N)][0] : [D]);
end where;

// Composante de base d'un additionneur binaire
FULL_ADDER( a, b, c) = (s, r)
where
	s = xor(xor(a,b),c);
	r = or(or( and(a,b), and(a,c)),and(b,c));
end where;

// Registre N bits
REG[N]( a : [N] ) = (s : [N])
where
	for i = 0 to N -1
		s[i] = reg(a[i]);
	end for;
end where;

// Tests suivants : mots ecrits des poids faibles vers les forts
// Permet de faire les switch sur l'index du cycle d'execution
// on observe que les 3 bits les moins significatifs
IS0( dat : [CL] ) = b
where
	b = AND[CL](NOT[CL](dat[0..CL-1]));
end where;

IS1( dat : [CL] ) = b
where
	b = and(dat[0], AND[CL-1](NOT[CL-1](dat[1..CL-1])));
end where;

IS2( dat : [CL] ) = b
where
	b = and(not(dat[0]), and(dat[1], NOT[CL-2](dat[2..CL-1])));
end where;

IS3( dat : [CL] ) = b
where
	b = and(dat[0], and(dat[1],not(dat[2])));
end where;

IS4( dat : [CL] ) = b
where
	b = and(not(dat[0]),and(not(dat[1]),dat[2]));
end where;

IS5( dat : [CL] ) = b
where
	b = and(dat[0],and(not(dat[1]),dat[2]));
end where;

//========================================================//

//========================================================//
//	  ALU : SubLeq contient uniquement SUB   	  //
//========================================================//

// Addition Binaire sur AR bits, avec retenue d'entree et retenue de sortie
ADD[N](r0 : [N], r1 : [N], carry_in) = (nr1 : [N], carry_out)
where
        c[0] = id(carry_in);
	for i = 0 to N - 1
		nr1[i],c[i+1] = FULL_ADDER(r0[i],r1[i],c[i]);
	end for;
	//flag de debordement
	carry_out = id(c[N]);
end where;

// Soustraction : a - b = a + 1 + 2^AR - 1 -b = a + 1 + not(b)
SUB(a : [AR], b : [AR]) = ( r : [AR] )
where
        r:[AR], _ = ADD[AR](a:[AR], NOT[AR](b:[AR]), vdd());
	// test de la soustraction
//	= pipe("./testSUB.bpox -AR $(AR)", a:[AR], b:[AR], r:[AR]);
end where;

//========================================================//

//=======================================================//
//           L'INTERFACE DE LA PUCE SUBLEQ               //
//=======================================================//

// clk_in : avec le simulateur bibop, on dispose de la primitive clock
//	mais dans la vraie vie, on remplace l'appel à clock 
//	par un branchement à l'entrée binaire clk

// run : 1 si on est en run-mode, 0 sinon (ram-mode)

// set_pc, pc_in : dans le cas ou run=0, si reset est à 1 on modifie la valeur 
//	du program counter avec la valeur donne dans pc_in

// write : dans le cas ou run=0, est-on en mode write (write = 1) 
//	ou read (write = 0)

// read|write_adress, data_in : dans le ram-mode, on donne l'adresse ou on veut
//	lire | ecrire la data_in qui est ignoree sinon

// pc_out : donne la valeur du registre PC pour permettre au 
//	circuit qui controle le subleq de faire des tests de terminaison
//	exemple de convention possible : subleq 0 0 0 à l'adresse 0 boucle
//	SubLeq a fini ssi PC = 0 (ou autre convention à chosir ...)

// data_out : dans le cas run=0 et lecture, donne la valeur lue
//	prend des valeurs arbitraires dans les autres cas

// Variables indexees par L : locales a la machine SUBLEQ
// Variables indexees par LSL : signaux utilises en mode RUN = 1

// ICY : index Cycle (on tourne en 6 cycles (ICY = 0..5) ou en 5 cycles si *b - *a <> 0)

SUBLEQ (
	// ENTREES : 
	clk_in, run, set_pc, pc_in:[AR], write, 
	read_adress:[AR], write_adress:[AR], data_in:[AR] ) 
	// SORTIES :
	= ( pc_out:[AR], data_out:[AR] )
with unused = ( clk_in, clk ) // BEBOP
where
	// Un peu de debug
//	= pipe("./ICY.bpox -v", LPC:[AR], ICY:[CL], Zmem_out:[AR], mem_out:[AR], Lprb_out:[AR], Lvra_out:[AR], 	Lsub_out:[AR]);

	// RESET : On est en run = 0 ou on vient de mettre run à 1
	RESET = or(not(run), and(run, not(reg(run))));
 
	// GESTION DU Program Counter et de l'Index CYcle ( LPC:[AR] & ICY:[CL] )
	// FIXME : optimisation du calcul des bits ICY
	ICY2 = IS2(ICY:[CL]);
	ICY3 = IS3(ICY:[CL]);
	ICY4 = IS4(ICY:[CL]);
	ICY5 = IS5(ICY:[CL]);
	
	// Savoir la valeur proposee pour PC par le mode run dans le cas ou il faut changer
	LSL_NEW_LPC:[AR] = MUX[AR](reg(ICY5), Zmem_out:[AR], REG[AR](LPC3:[AR])); 
	// reg sur LCP3 pour eviter un cycle
	
	// next_instruction designe le fait qu'il faut remettre ICY à 0 pour le prochain cycle
	// cela correspond exactement au moment ou il faut changer la valeur du PC
	// le CASE_ZERO designe le cas *b - *a = ZERO
	next_instruction = or(ICY5, and(not(CASE_ZERO), ICY4));
	add:[CL], _ = ADD[CL](ICY:[CL], vdd(), GND[CL-1](), gnd());
	mux_in = and(run, Z(next_instruction));
	mux_in_ICY = or(RESET, Z(next_instruction));
	ICY:[CL] = MUX[CL](mux_in_ICY , GND[CL](), REG[CL](add:[CL]));
	
	// LSL_LPC est la valeur proposee par le mode run pour LPC dans tous les cas
	// Il faut encore la muxer avec pc_in du monde exterieur si on est dans le cas set_pc
	LSL_LPC:[AR] = MUX[AR](mux_in, LSL_NEW_LPC:[AR], REG[AR](LPC:[AR]));
	CASE_SET_PC = and (not(run), set_pc);
	
	// Le program counter PC et les 3 adresses suivantes PC1, PC2, PC3
	LPC:[AR] = MUX[AR](CASE_SET_PC, pc_in:[AR], LSL_LPC:[AR]);
	
	// On calcul toujours PC + 1, PC + 2 (le PC reste sur l'instruction A pendant toute la lecture)
	LPC1:[AR], _ = ADD[AR](LPC:[AR], GND[AR](), vdd());                  // LPC1 = LPC_OUT + 1
	LPC2:[AR], _ = ADD[AR](LPC:[AR], gnd(), vdd(), GND[AR-2]() , gnd()); // LPC2 = LPC_OUT + 2
	LPC3:[AR], _ = ADD[AR](LPC:[AR], vdd(), vdd(), GND[AR-2]() , gnd()); // LPC3 = LPC_OUT + 3

	// Branchement des sorties
	// Pas de securite de stabilite sur les sorties dans les cas non prevus
//	= pipe("./pcout.bpox", pc_out:[AR], LPC:[AR]);
	pc_out:[AR] = ID[AR](LPC:[AR]);
	data_out:[AR] = ID[AR](mem_out:[AR]);

	// clk = id(clk_in); dans le cas ou on porte ce code vers du VHDL
	clk = id( clock() ); // Dans le cas BEBOP
	
	// La memoire RAM de la Machine SubLeq 
	// Utilisee avec un registre pour eviter les cycles combinatoires
	mem_out:[AR] = ram_MEM(Lmem_read:[AR], Lmem_write:[AR], Lmem_mod, Lmem_in:[AR]);
	Zmem_out:[AR] = REG[AR](mem_out:[AR]);
	
	// DEBUG PIPE GRAPHICS
	_ = pipe("./ramTEST.bpox -CL $(CL)", ICY:[CL], Lmem_read:[AR], Lmem_write:[AR], Lmem_mod, Lmem_in:[AR], Zmem_out:[AR]);

	// La ram &B
	// Les entrees sont branchees sur la sortie de la memoire
	// on fait le tri sur les enables
	Lprb_out:[AR] = ram_PRB(Lprb_mod, Zmem_out:[AR]);

	// La ram *A
	Lvra_out:[AR] = ram_VRA(Lvra_mod, Zmem_out:[AR]);

	// Pilotage d'ecriture dans les rams &B, *A
	Lprb_mod = id( ICY3 );
	Lvra_mod = id( ICY2 );

	// La valeur de la difference *b - *a
	// La sortie de l'ALU branchee a la sortie des RAMs VRA, et de la sortie du cycle prec
	// Lsub_out est correcte seulement quand ICY >= 4
	Lsub_out:[AR] = SUB(Zmem_out:[AR], Lvra_out:[AR]);

	// CASE_ZERO : negatif ou nul (complt a 2)
	CASE_ZERO = or(Lsub_out[AR-1], EQUALS[AR](Lsub_out:[AR], GND[AR]()));
	
	// Gestion de la memoire MEM : Lmem_read,write, mod, in	

	// 1) Gestion des adresses de lecture et d'ecriture dans le cas RUN = 1
	// On va toujours ecrire sur les cases memoires pointees par PRB
	LSL_mem_write_adress:[AR] = ID[AR](Lprb_out:[AR]);
	
	// 2) Pour ce qui est de la lecture, ca depend de l'indice du cycle ICY
	// On utilise un BDD brut.
	// (0:PC), (1:A), (2:PC1), (3:B), (4:B), (5:PC2), 0000000
	// La decision ICY (index Cycle) est sur 3 bits car on ne depasse jamais 5 cycles
	// BDD : il faut 2^CL * AR bits d'entrees, suivis de CL bit de decision
	LSL_mem_read_adress:[AR] = BDD[2^CL][AR](	LPC:[AR],	// PC : on lit A
	 						Zmem_out:[AR],	// Zm = A : on lit *A
							LPC1:[AR],	// PC + 1 : on lit B
							Zmem_out:[AR],	// Zm = B : on lit *B
							Lprb_out:[AR],	// B (ecriture dans B de *B - *A)
							LPC2:[AR],	// PC + 2 (pas dans tous les cas)
							GND[2*AR](),	// On a donne 6 valeurs AR, il en manque 2
							ICY:[CL]); 	// bits de decision

	// 2) Gestion de LSL_mem_write_mod : on ecrit seulement et systematiquement au cycle 4
	LSL_mem_write_mod = id(ICY4);
	
	// 3) Quel que soit le cas, on ecrit seulement le resultat de la difference *B - *A 
	// Ce resultat sera observe seulement quand LSL_mem_write_mod = 1, ie qd ICY >= 4
	LSL_mem_data_in:[AR] = ID[AR](Lsub_out:[AR]);

	// Multiplexer le pilotage de la ram memoire
	// Si run = 0, on fournit directement les valeurs de l'entree
	// Si run = 1, on fournit les valeurs SubLeq d'execution
	Lmem_read:[AR] =  MUX[AR](run, LSL_mem_read_adress:[AR], read_adress:[AR]);
	Lmem_write:[AR] = MUX[AR](run, LSL_mem_write_adress:[AR], write_adress:[AR]);
	Lmem_mod =            mux(run, LSL_mem_write_mod, write);
	Lmem_in:[AR] =    MUX[AR](run, LSL_mem_data_in:[AR], data_in:[AR]);
end where;

// Test pour simuler le run / unrun mode en plein milieu d'un cycle.
// Le fait d'ajouter la parametrisation [TEST] fait que ce n'est pas la derniere fonction main (astuce)
TESTrun_or_not[TEST] run = pc_out:[AR], data_out:[AR]
where

	pc_out:[AR], data_out:[AR] = SUBLEQ (
		clk_in, run, set_pc, pc_in:[AR], write, 
		read_adress:[AR], write_adress:[AR], data_in:[AR] );

	clk_in = vdd();

	set_pc, pc_in:[AR], write, 
		read_adress:[AR], write_adress:[AR], data_in:[AR] = pipe("./runpartial.bpix");

	= pipe("./notrun.bpox", set_pc, pc_in:[AR], write,
		read_adress:[AR], write_adress:[AR], data_in:[AR]); 
end where;
